#include <QStandardItemModel>
#include "dwycolist2.h"

// note: some of this was generated by gemini 2.5 pro.
// it was mostly trash, and i ended up wasting a fair bit
// of time fixing it.

QStandardItemModel *
init_syncmodel()
{
    // Create the model with 0 rows and 3 columns
    auto *apiModel = new QStandardItemModel(0, 3, 0);

    // Set the column headers
    apiModel->setHorizontalHeaderLabels({"UID", "IP", "STAT"});
    return apiModel;
}

/**
 * @brief Refreshes the model with the latest data from the dwyco_ API.
 *
 * This function clears existing data rows while preserving headers and then
 * repopulates the model. This is the correct way to update a model that is
 * already set on a view.
 *
 * @param model A pointer to the QStandardItemModel to be refreshed.
 */
void refreshModel(QStandardItemModel *model) {
    if (!model) {
        return;
    }

    // Clear only the data rows, leaving the header configuration intact.
    model->removeRows(0, model->rowCount());
    DWYCO_SYNC_MODEL sm;
    if(!dwyco_get_sync_model(&sm))
        return;

    simple_scoped qsm(sm);

    // Get the total number of items from the API.
    const int numRows = qsm.rows();
    model->setRowCount(numRows);

    // Create a QStandardItem for each column in each row.
    for (int i = 0; i < numRows; ++i) {
        // Fetch data for each column from the API
        QStandardItem *uidItem = new QStandardItem(qsm.get<QByteArray>(i, DWYCO_SM_UID).toHex());
        QStandardItem *ipItem = new QStandardItem(qsm.get<QByteArray>(i, DWYCO_SM_IP));
        //QStandardItem *percentItem = new QStandardItem(QByteArray::number(qsm.get_long(i, DWYCO_SM_PERCENT_SYNCED)));
        QStandardItem *percentItem = new QStandardItem(qsm.get<QByteArray>(i, DWYCO_SM_STATUS));

        model->setItem(i, 0, uidItem);
        model->setItem(i, 1, ipItem);
        model->setItem(i, 2, percentItem);
    }

}
