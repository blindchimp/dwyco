
/* ===
; Copyright (c) 1995-present, Dwyco, Inc.
; 
; This Source Code Form is subject to the terms of the Mozilla Public
; License, v. 2.0. If a copy of the MPL was not distributed with this file,
; You can obtain one at https://mozilla.org/MPL/2.0/.
*/
#ifndef VCIO_H
#define VCIO_H
#include <stdio.h>
#include "dwgrows.h"
#include "vc.h"
// simple hack to get rid of iostreams
// warning: no error handling on writes for this class

class VcIOHack {
private:
	FILE *sio;
protected:
	const char *format;
public:

	VcIOHack(FILE *);
	virtual ~VcIOHack() {}
	
	virtual VcIOHack& set_format(const char *);
	virtual VcIOHack& operator<<(void *);
	virtual VcIOHack& operator<<(const char *);
	virtual VcIOHack& operator<<(char);
	virtual VcIOHack& operator<<(unsigned char);
	virtual VcIOHack& operator<<(int);
	virtual VcIOHack& operator<<(unsigned int);
	virtual VcIOHack& operator<<(long);

#ifdef _WIN64
        virtual VcIOHack& operator<<(long long);
#endif
	virtual VcIOHack& operator<<(unsigned long);
	virtual VcIOHack& operator<<(double);
    virtual VcIOHack& operator<<(vc);
    virtual VcIOHack& append(const char *buf, int len);
	virtual void flush();
};

// WARNING: the string is not 0 terminated, you must use the count
// when dealing with strings generated by this class
class VcIOHackStr : public VcIOHack {
private:
	DwGrowingString s;
public:
	VcIOHackStr(int = 128);

	char *str();
	const char *ref_str();
	int pcount();
	void reset();

	VcIOHack& operator<<(const char *);
	VcIOHack& operator<<(void *);
	VcIOHack& operator<<(char);
	VcIOHack& operator<<(unsigned char);
	VcIOHack& operator<<(int);
	VcIOHack& operator<<(unsigned int);
	VcIOHack& operator<<(long);
	VcIOHack& operator<<(unsigned long);
	VcIOHack& operator<<(double);
    virtual VcIOHack& operator<<(vc);
    virtual VcIOHack& append(const char *buf, int len);
};

#endif
