#
# template for comp_def
#
# $Header: /e/linux/home/dwight/repo/jenkins/rcs/comp_def 1.2 1998/06/22 02:28:08 dwight Exp $
#

COMP_NAME=jhead

.IF $(COMP) != $(NULL)
.IF $(COMP) != $(COMP_NAME)
# totally bogus, but need to stop the make here or weird stuff happens
.ERROR:
	echo COMP name conflict, makefiles are hosed.
	
COMP := __bogus
.INCLUDE: __bogus

.END
.ELSE
COMP=$(COMP_NAME)
.END

#
# list of component level C and C++ options
#
COMP_CCOPTS=
COMP_CPPOPTS= -fpermissive
COMP_IFLAGS += -I../cjhead

# The default library built by the component has a basename
# that is generated from the component name. Depending on the
# compiler system used to do the build, the name of the library
# will be something like $(COMP).lib or $(COMP).a
# The same thing is true for the default executable for the component,
# execept it will be named something like $(COMP).exe or $(COMP)
# You could change the default output, but this is not a good idea...
# If you have other executables or libraries to generate, it is
# better to add targets to comp_trg to build them (pending support
# for generating multiple libs/exes in the make system).

#
# list of things that are put into the library for the component.
# names should be without extensions, like this:
# COMP_LIB_MEMBERS=file1 file2 file3
#
COMP_LIB_MEMBERS=  \
exif \
gpsinfo \
iptc \
jhead \
jpgfile \
jpgqguess \
makernote \
paths

# list of objects that should be linked into the component executable
# but not put into the library. without extensions:
# COMP_EXE_MEMBERS=file1 file2 file3

#
# list of executables to be generated by the
# component. Not fully supported. You need extra
# targets in comp_trg to get this to work...
#
#EXES_COMP=$(VER_MEMBERS:s/.c//)

# list of libraries to link with the component executable. these
# are libraries that are local to the component:
# LIBS_COMP=lib1 lib2
LIBS_COMP=

# list of libraries to link with the component executable from the
# configuration install directory.
# COMP_LIBS_IMPORT=lib1 lib2
#
#COMP_LIBS_IMPORT=nrc

# list of libraries to link with component executable from the
# surrounding environment. all parts of the items to be linked (extensions,
# paths, etc.) must be explicit, and the make system does not
# change the values.
# LIBS_FOREIGN=c:\djgpp\lib\libgr.a
# since the make system gives you no help with the names, you may
# have to twiddle with the "IF" conditions to make it work right
# for all the platforms the component can compile on.
#
.IF $(SYSTEM_STYLE) == UNIX
LIBS_FOREIGN=
.ELSE
LIBS_FOREIGN=
.END

#
# list of libraries (or -l flags) to be used on the link line.
# these must be complete paths or -l flags, and they are not
# used in any dependency checking.
#
#LIBS_SYSTEM=-lm

# list of files to be put into the source repository for the component.
# complete file names must be specified (without leading path info).
# do not put binary files into the list, since not all version control systems
# can handle binaries.
# VER_MEMBERS=a.c b.cpp foo.doc
VER_MEMBERS=

# list of local include files to install into the configuration include dir
#
# INCLUDES_EXPORT=a.h b.h
INCLUDES_EXPORT=

# list of local libraries to install into the configuration lib dir
# no extensions or path info...
# if you don't set this, the default is to install the default library
# for the component.
# if you set it to NONE, nothing is exported.
#
# LIBS_COMP_EXPORT=foolib barlib
#LIBS_COMP_EXPORT=NONE

# list of executables to export from the component to the config install dir.
# if you don't set this, default is to install the default executable.
# if you set it to NONE, nothing is exported.
# no extensions or paths...
#
# EXES_COMP_EXPORT=foo bar
#
EXES_COMP_EXPORT=NONE

#
# list of scripts to be exported to config install dir.
# just list the names of the scripts, and they are 
# copied over... note: this is done at the same time
# the executable for the component is installed.
#
# SCRIPTS_EXPORT=groovy

# list of documentation files to export from component to config install dir.
#
# DOCS_EXPORT=foo.doc bar.mif

#
# list of miscellaneous files to install in "misc"
# MISCS_EXPORT=mumble.baz
